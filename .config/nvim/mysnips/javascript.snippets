priority -50

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet cb "Comment block"
/*
	$1
*/
endsnippet

snippet af "Arrow function"
const ${1:variable} = (${2:parameters}) => {
	${3:function body}
}
endsnippet

snippet cf "Concise body function"
const ${1:variable} = ${2:parameters} => ${3:function body};
endsnippet

snippet elif "else if block"
else if (${1:true}) {
	${2:code}
}
endsnippet

snippet tern "ternary expression"
${1:check} ? ${2:true} : ${3:false};
endsnippet

snippet for "for loop"
for (let ${1:i} = ${2:0}; $1 ${3:<} $4; $1${5:++}) {
	$6
}
endsnippet

snippet fore "forEach()"
${1:arrayName}.forEach((${2:i}) => $3)
endsnippet

snippet foro "for... of loop"
for (const ${1:i} of ${2:arrayName}) {
	$3
}
endsnippet

snippet fori "for... in loop"
for (let ${1:property} in ${2:object}) {
	$3
}
endsnippet

snippet while "while loop"
while (${1:true}) {
	$2
}
endsnippet

snippet fac "object factory"
const ${1:factoryName} = (${2:parameters}) => {
	function ${3:objectName}($4) {
		return{
			${5:property}: ${6:parameter-for-value},
			${7:method() {
				${8:this.property = 'blahblah'}
			}}
		};
	};
	return $3;
};
endsnippet

snippet rand "random number"
Math.floor(Math.random() * ${1:num})
endsnippet

snippet ev "click etc."
${1:eventTarget}.${2:addEventListener}('${3:event}', ${4:eventHandlerFunction});
endsnippet

snippet cs "change css"
${1:element}.${2:style}.${3:property} = '${4:value}';
endsnippet

snippet get "Get Elements"
getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:T}${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function (element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function (${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet o "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function (${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet fun "function (named)" b
function ${1:function_name}(${2:parameters}) {
	${VISUAL}$0
}
endsnippet

snippet vf "function (assigned to var)"
${1:var }${2:function_name} = function $2 ($3) {
	${VISUAL}$0
};
endsnippet

# Drop priority so this only triggers when not beginning of line.
priority -51
snippet fun "function (anonymous)" w
function ($1) {
	${VISUAL}$0
}$2
endsnippet
priority -50

snippet anf "function (anonymous)" i
function ($1) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:window}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ;fe "Minify safe iife"
;(function (${1}) {
	${VISUAL}$0
}(${2}))
endsnippet

snippet timeout "setTimeout function"
setTimeout(function () {
	${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwn" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwn($1)) {
		${VISUAL}$0
	}
}
endsnippet

snippet if "if (condition) { ... }"
if (${1:true}) {
	${VISUAL}$0
}
endsnippet

snippet ife "if (condition) { ... } else { ... }"
if (${1:true}) {
	$2
} else {
	${3}
}
endsnippet

snippet switch
switch (${VISUAL}${1:expression}) {
	case '${VISUAL}${3:case}':
		${4}
		break;
	${0}
	default:
		${2}
}
endsnippet

snippet case "case 'xyz': ... break"
case '${VISUAL}${1:case}':
	${VISUAL}$0
	break;
endsnippet

snippet r "Return statement"
return ${VISUAL}$0;
endsnippet

snippet us
'use strict';
endsnippet

snippet imp "import"
import ${2} from ${1}
endsnippet

# Debugging
snippet de
debugger;
endsnippet
snippet cl "console.log"
console.log(${0})
endsnippet
snippet cd "console.debug"
console.debug(${0});
endsnippet
snippet ce "console.error"
console.error(${0});
endsnippet
snippet cw "console.warn"
console.warn(${0});
endsnippet
snippet ci "console.info"
console.info(${0});
endsnippet
snippet ct "console.trace"
console.trace(${0:label});
endsnippet
snippet ctime "console.time ... console.timeEnd"
console.time("${1:label}");
${0:${VISUAL}}
console.timeEnd("$1");
endsnippet
snippet ctimestamp "console.timeStamp"
console.timeStamp("${1:label}");
endsnippet
snippet ca "console.assert"
console.assert(${1:expression}, ${0:obj});
endsnippet
snippet cclear "console.clear"
console.clear();
endsnippet
snippet cdir "console.dir"
console.dir(${0:obj});
endsnippet
snippet cdirx "console.dirxml"
console.dirxml(${1:object});
endsnippet
snippet cgroup "console.group"
console.group("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet
snippet cgroupc "console.groupCollapsed"
console.groupCollapsed("${1:label}");
${0:${VISUAL}}
console.groupEnd();
endsnippet
snippet cprof "console.profile"
console.profile("${1:label}");
${0:${VISUAL}}
console.profileEnd();
endsnippet
snippet ctable "console.table"
console.table(${1:"${2:value}"});
endsnippet
snippet clstr "console.log stringified"
console.log(JSON.stringify(${0}, null, 2));
endsnippet

# vim:ft=snippets:
